{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","displayText","setDisplayText","handleError","error","Promise","resolve","reject","useEffect","axios","get","then","res","data","fact","catch","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OA2CeA,MAvCf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACNC,EADM,KACOC,EADP,KAgCb,SAASC,EAAYC,GACnBF,EAAe,yBAGjB,OAhCc,IAAIG,SAAQ,SAACC,EAASC,GAClCD,EAAQ,YASVE,qBAAU,WAKRC,IACGC,IAAI,8BACJC,MAAK,SAACC,GAAD,OAASV,EAAeU,EAAIC,KAAKC,QAAOX,GAGhDM,IACGC,IAAI,8BACJC,MAAK,SAACC,GAAD,OAASA,EAAIC,QAClBF,MAAK,SAACE,GAAD,OAAUA,EAAKC,QACpBH,KAAKT,GACLa,MAAMZ,KACR,IAMI,qBAAKa,UAAU,MAAf,SAAsBf,KC5BhBgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9fdd8188.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [displayText, setDisplayText] = useState(\"\");\n\n  // Creating a promise\n  const hello = new Promise((resolve, reject) => {\n    resolve(\"Hello\");\n  });\n\n  // Using .then\n  // hello.then(setDisplayText);\n\n  // Chaining .then\n  // hello.then((text) => text + \" World!\").then(setDisplayText);\n\n  useEffect(() => {\n    // Calling a GET api\n    // axios.get(\"https://catfact.ninja/fact\").then(console.log);\n\n    // Handling the response and error\n    axios\n      .get(\"https://catfact.ninja/fact\")\n      .then((res) => setDisplayText(res.data.fact), handleError); // First function handles value, second handles errors\n\n    // Using catch instead\n    axios\n      .get(\"https://catfact.ninja/fact\")\n      .then((res) => res.data)\n      .then((data) => data.fact)\n      .then(setDisplayText)\n      .catch(handleError); // Alternative to handle error (preferred)\n  }, []);\n\n  function handleError(error) {\n    setDisplayText(\"Something went wrong!\");\n  }\n\n  return <div className=\"App\">{displayText}</div>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}